package com.redhat.qe.jon.sahi.tests;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Logger;
import org.testng.annotations.*;

import com.redhat.qe.auto.testng.TestNGUtils;
import com.redhat.qe.jon.sahi.base.SahiTestScript;

/**
 * @author jkandasa (Jeeva Kandasamy)
 * Aug 17, 2011
 */

public class AlertTest extends SahiTestScript{
	private static Logger _logger = Logger.getLogger(AlertTest.class.getName());
	private static long alertDefinitionCreationTime ;
	private static final int alertpollingTime = 1000*60*12;
	
	public static String RESOURCE_NAME 				= "resourceName";
	public static String ALERT_NAME 				= "alertName";
	public static String ALERT_DESCRIPTION 			= "alertDescription";
	public static String CONDITION_DROPDOWNS 		= "conditionDropDowns";
	public static String CONDITION_TEXTBOX 			= "conditionTextbox";
	public static String NOTIFICATION_TYPE 			= "notificationType";
	public static String NOTIFICATION_DATA 			= "notificationData";
	public static String RECOVERY_ALERT_DROPDOWN	= "recoveryAlertDropDown";
	public static String RECOVERY_ALERT_DISABLE		= "recoveryAlertDisableWhenFired";
	public static String DAMPENING_DROPDOWN			= "dampeningDropDown";
	public static String DAMPENING_TEXTBOX 			= "dampeningTextBox";
	
	@Test (groups="alertTest", dataProvider="alertCreationData")
	public void createAlert(Object alertDetail){
		HashMap<String, String> alertDetails = (HashMap<String, String>)alertDetail;
		sahiTasks.createAlert(alertDetails.get(RESOURCE_NAME), alertDetails.get(ALERT_NAME), alertDetails.get(ALERT_DESCRIPTION), alertDetails.get(CONDITION_DROPDOWNS), alertDetails.get(CONDITION_TEXTBOX), alertDetails.get(NOTIFICATION_TYPE), alertDetails.get(NOTIFICATION_DATA), alertDetails.get(DAMPENING_DROPDOWN), alertDetails.get(DAMPENING_TEXTBOX), alertDetails.get(RECOVERY_ALERT_DROPDOWN), alertDetails.get(RECOVERY_ALERT_DISABLE));
		alertDefinitionCreationTime  = new Date().getTime();
	}
	
	@Test (groups="alertTest", dataProvider="alertCreationData")
	public void validateAlertHistoryPage(Object alertDetail) throws InterruptedException{
		if((new Date().getTime() - alertDefinitionCreationTime) <= alertpollingTime ){ //10 minutes
			_logger.info("Last Alret definition creation time should be greater than "+(alertpollingTime/(1000*60))+" minute(s), from current time!");
			_logger.info("Thread sleep has been activated!");
			while((new Date().getTime() - alertDefinitionCreationTime) <= alertpollingTime){
				_logger.info(((alertpollingTime - (new Date().getTime() - alertDefinitionCreationTime))/(1000))+" second(s) left to unlock..");
				Thread.sleep(1000*60);							
			}			
		}
		HashMap<String, String> alertDetails = (HashMap<String, String>)alertDetail;
		sahiTasks.validateAlertHistory(alertDetails.get(RESOURCE_NAME), alertDetails.get(ALERT_NAME));
	}
	
	
	@DataProvider(name="alertCreationData")
	public Object[][] getAlertCreationData(){
		ArrayList<HashMap<String, String>> data = new ArrayList<HashMap<String, String>>();
		HashMap<String, String> map = new HashMap<String, String>();
		
		map.put(RESOURCE_NAME, "Servers=RHQ Agent");
		map.put(ALERT_NAME, "RHQ Agent-Server Clock Difference");
		map.put(ALERT_DESCRIPTION, "Generated by automation");
		map.put(CONDITION_DROPDOWNS, "Availability Change-->Measurement Absolute Value Threshold,Agent-Server Clock Difference-->Agent-Server Clock Difference[1]");
		map.put(CONDITION_TEXTBOX, "metricAbsoluteValue=500000");
		map.put(NOTIFICATION_TYPE, "System Users");
		map.put(NOTIFICATION_DATA, "rhqadmin");		
		map.put(DAMPENING_DROPDOWN, "None --> Consecutive");
		map.put(DAMPENING_TEXTBOX, "consecutiveOccurrencesSpinner=1");
		//map.put(DAMPENING_DROPDOWN, "None --> Time Period, minutes --> hours");
		//map.put(DAMPENING_TEXTBOX, "durationOccurrencesSpinner=2,durationTimePeriodSpinner=2");
		map.put(RECOVERY_ALERT_DISABLE, "disableWhenFired=yes");
		data.add((HashMap<String, String>) map.clone());
		map.clear();
		
		//map.put(RESOURCE_NAME, "Servers=RHQ Agent");
		map.put(ALERT_NAME, "RHQ Agent - Avg Execution Time Commands Received Successfully");
		map.put(ALERT_DESCRIPTION, "Generated by automation");
		map.put(CONDITION_DROPDOWNS, "Availability Change-->Measurement Absolute Value Threshold,Agent-Server Clock Difference-->Avg Execution Time Commands Received Successfully");
		map.put(CONDITION_TEXTBOX, "metricAbsoluteValue=100000");
		map.put(NOTIFICATION_TYPE, "System Users");
		map.put(NOTIFICATION_DATA, "rhqadmin");	
		map.put(RECOVERY_ALERT_DISABLE, "disableWhenFired=yes");
		map.put(DAMPENING_DROPDOWN, "None --> Consecutive");
		map.put(DAMPENING_TEXTBOX, "consecutiveOccurrencesSpinner=1");
		data.add((HashMap<String, String>) map.clone());
		map.clear();
		
		//map.put(RESOURCE_NAME, "Servers=RHQ Agent");
		map.put(ALERT_NAME, "RHQ Agent - Avg Execution Time Commands Sent Successfully");
		map.put(ALERT_DESCRIPTION, "Generated by automation");
		map.put(CONDITION_DROPDOWNS, "Availability Change-->Measurement Absolute Value Threshold,Agent-Server Clock Difference-->Avg Execution Time Commands Sent Successfully");
		map.put(CONDITION_TEXTBOX, "metricAbsoluteValue=100000");
		map.put(NOTIFICATION_TYPE, "System Users");
		map.put(NOTIFICATION_DATA, "rhqadmin");		
		map.put(RECOVERY_ALERT_DISABLE, "disableWhenFired=yes");
		map.put(DAMPENING_DROPDOWN, "None --> Consecutive");
		map.put(DAMPENING_TEXTBOX, "consecutiveOccurrencesSpinner=1");
		data.add((HashMap<String, String>) map.clone());
		map.clear();
		
		//map.put(RESOURCE_NAME, "Servers=RHQ Agent");
		map.put(ALERT_NAME, "RHQ Agent - JVM Active Threads");
		map.put(ALERT_DESCRIPTION, "Generated by automation");
		map.put(CONDITION_DROPDOWNS, "Availability Change-->Measurement Absolute Value Threshold,Agent-Server Clock Difference-->JVM Active Threads,< (Less than) --> > (Greater Than)");
		map.put(CONDITION_TEXTBOX, "metricAbsoluteValue=1");
		map.put(NOTIFICATION_TYPE, "System Users");
		map.put(NOTIFICATION_DATA, "rhqadmin");
		map.put(RECOVERY_ALERT_DISABLE, "disableWhenFired=yes");
		map.put(DAMPENING_DROPDOWN, "None --> Consecutive");
		map.put(DAMPENING_TEXTBOX, "consecutiveOccurrencesSpinner=1");
		data.add((HashMap<String, String>) map.clone());
		map.clear();
		
		//map.put(RESOURCE_NAME, "Servers=RHQ Agent");
		map.put(ALERT_NAME, "RHQ Agent - JVM Free Memory");
		map.put(ALERT_DESCRIPTION, "Generated by automation");
		map.put(CONDITION_DROPDOWNS, "Availability Change-->Measurement Absolute Value Threshold,Agent-Server Clock Difference-->JVM Free Memory");
		map.put(CONDITION_TEXTBOX, "metricAbsoluteValue=209715200");
		map.put(NOTIFICATION_TYPE, "System Users");
		map.put(NOTIFICATION_DATA, "rhqadmin");		
		map.put(RECOVERY_ALERT_DISABLE, "disableWhenFired=yes");
		map.put(DAMPENING_DROPDOWN, "None --> Consecutive");
		map.put(DAMPENING_TEXTBOX, "consecutiveOccurrencesSpinner=1");
		data.add((HashMap<String, String>) map.clone());
		map.clear();
		
		//map.put(RESOURCE_NAME, "Servers=RHQ Agent");
		map.put(ALERT_NAME, "RHQ Agent Number Of Active Commands Being Sent");
		map.put(ALERT_DESCRIPTION, "Generated by automation");
		map.put(CONDITION_DROPDOWNS, "Availability Change-->Measurement Absolute Value Threshold,Agent-Server Clock Difference-->Number Of Active Commands Being Sent");
		map.put(CONDITION_TEXTBOX, "metricAbsoluteValue=500000");
		map.put(NOTIFICATION_TYPE, "System Users");
		map.put(NOTIFICATION_DATA, "rhqadmin");
		map.put(RECOVERY_ALERT_DISABLE, "disableWhenFired=yes");
		map.put(DAMPENING_DROPDOWN, "None --> Consecutive");
		map.put(DAMPENING_TEXTBOX, "consecutiveOccurrencesSpinner=1");
		data.add((HashMap<String, String>) map.clone());
		map.clear();
		
		//map.put(RESOURCE_NAME, "Servers=RHQ Agent");
		map.put(ALERT_NAME, "RHQ Agent - Number of restarts");
		map.put(ALERT_DESCRIPTION, "Generated by automation");
		map.put(CONDITION_DROPDOWNS, "Availability Change-->Measurement Absolute Value Threshold,Agent-Server Clock Difference-->Number of Agent Restarts");
		map.put(CONDITION_TEXTBOX, "metricAbsoluteValue=500");
		map.put(NOTIFICATION_TYPE, "System Users");
		map.put(NOTIFICATION_DATA, "rhqadmin");		
		map.put(RECOVERY_ALERT_DISABLE, "disableWhenFired=yes");
		map.put(DAMPENING_DROPDOWN, "None --> Consecutive");
		map.put(DAMPENING_TEXTBOX, "consecutiveOccurrencesSpinner=1");
		data.add((HashMap<String, String>) map.clone());
		map.clear();
		

		//map.put(RESOURCE_NAME, "Servers=RHQ Agent");
		map.put(ALERT_NAME, "RHQ Agent - Number of Commands In Queue");
		map.put(ALERT_DESCRIPTION, "Generated by automation");
		map.put(CONDITION_DROPDOWNS, "Availability Change-->Measurement Absolute Value Threshold,Agent-Server Clock Difference-->Number of Commands In Queue");
		map.put(CONDITION_TEXTBOX, "metricAbsoluteValue=50000");
		map.put(NOTIFICATION_TYPE, "System Users");
		map.put(NOTIFICATION_DATA, "rhqadmin");		
		map.put(RECOVERY_ALERT_DISABLE, "disableWhenFired=yes");
		map.put(DAMPENING_DROPDOWN, "None --> Consecutive");
		map.put(DAMPENING_TEXTBOX, "consecutiveOccurrencesSpinner=1");
		data.add((HashMap<String, String>) map.clone());
		map.clear();
		

		//map.put(RESOURCE_NAME, "Servers=RHQ Agent");
		map.put(ALERT_NAME, "RHQ Agent - Number of Commands Received Successfully");
		map.put(ALERT_DESCRIPTION, "Generated by automation");
		map.put(CONDITION_DROPDOWNS, "Availability Change-->Measurement Absolute Value Threshold,Agent-Server Clock Difference-->Number of Commands Received Successfully");
		map.put(CONDITION_TEXTBOX, "metricAbsoluteValue=500000");
		map.put(NOTIFICATION_TYPE, "System Users");
		map.put(NOTIFICATION_DATA, "rhqadmin");		
		map.put(RECOVERY_ALERT_DISABLE, "disableWhenFired=yes");
		map.put(DAMPENING_DROPDOWN, "None --> Consecutive");
		map.put(DAMPENING_TEXTBOX, "consecutiveOccurrencesSpinner=1");
		data.add((HashMap<String, String>) map.clone());
		map.clear();
		

		return TestNGUtils.convertListTo2dArray(data);
		
	}
}
